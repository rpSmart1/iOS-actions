name: iOS Starter Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Default Scheme
        id: scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "default=$default" >> $GITHUB_OUTPUT

      - name: Build
        env:
          scheme: ${{ steps.scheme.outputs.default }}
          platform: iOS Simulator
        run: |
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          if [ -f *.xcworkspace ]; then
            filetype_parameter="workspace"
            file_to_build=$(ls *.xcworkspace | head -1)
          else
            filetype_parameter="project"
            file_to_build=$(ls *.xcodeproj | head -1)
          fi
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"

      - name: Test
        env:
          scheme: ${{ steps.scheme.outputs.default }}
          platform: iOS Simulator
        run: |
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          if [ -f *.xcworkspace ]; then
            filetype_parameter="workspace"
            file_to_build=$(ls *.xcworkspace | head -1)
          else
            filetype_parameter="project"
            file_to_build=$(ls *.xcodeproj | head -1)
          fi
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"

